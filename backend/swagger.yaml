openapi: 3.0.0
info:
  title: SmartSpace.AI API
  version: 1.0.0
  description: API documentation for the SmartSpace.AI platform

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        image:
          type: string
        category:
          type: string
        style:
          type: string
        color:
          type: string
        stock:
          type: integer
        modelPath:
          type: string
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: integer
              price:
                type: number
        total:
          type: number
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        createdAt:
          type: string
          format: date-time

    ChatMessage:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        message:
          type: string
        response:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

    put:
      tags:
        - Authentication
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '401':
          description: Unauthorized

  /inventory:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: style
          schema:
            type: string
        - in: query
          name: color
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
        '401':
          description: Unauthorized

  /inventory/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      tags:
        - Products
      summary: Update product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  /orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

    post:
      tags:
        - Orders
      summary: Create new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                      quantity:
                        type: integer
      responses:
        '201':
          description: Order created successfully
        '401':
          description: Unauthorized

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found

    put:
      tags:
        - Orders
      summary: Update order status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Order not found

  /chat:
    post:
      tags:
        - Chat
      summary: Send message to AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized

  /chat/history:
    get:
      tags:
        - Chat
      summary: Get chat history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chat history
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized

  /admin/dashboard:
    get:
      tags:
        - Admin
      summary: Get admin dashboard data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      totalProducts:
                        type: integer
                      totalOrders:
                        type: integer
                      totalUsers:
                        type: integer
                      totalRevenue:
                        type: number
                      recentOrders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      lowStockProducts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /admin/users/{id}:
    put:
      tags:
        - Admin
      summary: Update user role
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found 